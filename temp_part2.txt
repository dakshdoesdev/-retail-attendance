                    <Select value={userFilter} onValueChange={setUserFilter}>
                      <SelectTrigger className="w-56">
                        <SelectValue placeholder="Filter by employee" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Employees</SelectItem>
                        {uniqueUsers.map((u) => (
                          <SelectItem key={u.id} value={u.id}>
                            {u.username}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                )}
                <div className="mb-4 flex items-center gap-3">
                  <Select value={sortBy} onValueChange={(v) => setSortBy(v as any)}>
                    <SelectTrigger className="w-40">
                      <SelectValue placeholder="Sort by" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="date">Date</SelectItem>
                      <SelectItem value="name">Employee</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button variant="outline" onClick={() => setSortDir(d => d === 'asc' ? 'desc' : 'asc')}>
                    {sortDir === 'asc' ? 'Asc' : 'Desc'}
                  </Button>
                </div>
                
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Employee</TableHead>
                      <TableHead>Date</TableHead>
                      <TableHead>Duration</TableHead>
                      <TableHead>File Size</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredRecordings.map((recording) => (
                      <Fragment key={recording.id}>
                        <TableRow data-testid={`row-recording-${recording.id}`}>
                          <TableCell>
                            <div>
                              <div className="font-medium text-gray-900">{recording.user.username}</div>
                              <div className="text-xs text-gray-500">{recording.user.employeeId}</div>
                            </div>
                          </TableCell>
                          <TableCell>{formatDate(recording.recordingDate)}</TableCell>
                          <TableCell>{recording.duration ? formatDuration(recording.duration) : "-"}</TableCell>
                          <TableCell>{recording.fileSize ? formatFileSize(recording.fileSize) : "-"}</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button size="sm" variant="outline" onClick={() => handlePlay(recording)} data-testid={`button-play-${recording.id}`}>
                                <Play className="h-4 w-4" />
                              </Button>
                              <Button size="sm" variant="outline" onClick={() => handleDownload(recording)} data-testid={`button-download-${recording.id}`}>
                                <Download className="h-4 w-4" />
                              </Button>
                              <Button size="sm" variant="destructive" onClick={() => handleDelete(recording.id)} data-testid={`button-delete-${recording.id}`}>
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      </Fragment>
                    ))}
                    {filteredRecordings.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={5} className="text-center text-gray-500 py-8">
                          No audio recordings found
                        </TableCell>
                      </TableRow>
                    ) : null}
                  </TableBody>
                </Table>
              </div>
            )}
          </CardContent>
        </Card>

        <Card data-testid="card-storage-management">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <HardDrive className="h-5 w-5" />
              Storage Management
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-900" data-testid="text-total-storage">
                  {formatFileSize(totalSize)}
                </p>
                <p className="text-sm text-gray-600">Total Storage Used</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-900" data-testid="text-total-recordings">
                  {totalFiles}
                </p>
                <p className="text-sm text-gray-600">Total Recordings</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-900">15 days</p>
                <p className="text-sm text-gray-600">Auto-Delete After</p>
              </div>
            </div>

            <div className="text-center">
              <Button variant="destructive" onClick={handleCleanup} disabled={cleanupMutation.isPending} data-testid="button-cleanup">
                {cleanupMutation.isPending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Trash2 className="mr-2 h-4 w-4" />}
                Clean Up Old Files
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Inline audio panel under history */}
      {selectedRecording && (
        <div className="max-w-7xl mx-auto px-6 pb-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="truncate">{selectedRecording.fileName || 'Selected Recording'}</span>
                <Button variant="ghost" size="sm" onClick={() => setSelectedRecording(null)}>
                  <X className="h-4 w-4" />
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <audio ref={audioRef} controls className="w-full mb-2" />
              {selectedRecording.fileUrl && (
                <AudioTimeline
                  fileUrl={selectedRecording.fileUrl}
                  audioRef={audioRef}
                  duration={selectedRecording.duration || undefined}
                  startTime={selectedRecording.createdAt || undefined}
                />
              )}
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
